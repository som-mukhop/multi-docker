# Refers to a service called 'client'
# So syntax says, there is an upstream, we are calling a client(Line 3), which is located at client(Line 4). Here client is a service/url) at port 3000
upstream client {  # Sets up definition for upstream for a service called client
    server client:3000;
}

# Refers to a service called 'api'
# So syntax says, there is an upstream, we are calling a api(Line 9), which is located at api(Line 10). Here api is a service/url) at port 5000
upstream api {  # Sets up definition for upstream for a service called api
    server api:5000;
}

#Main nginx configuration for routing
server {
    listen 80; # We say hey nginx we want a server that listens on port 80

    #Routing rules

    #If anyone request for / then setup a proxy and essentially pass through this reqest to the 'client' upstream.(defined at Line 3).
    location / {   
        proxy_pass http://client;   
    }

    #Fix for websocket errors
    #If anyone request for /ws then setup a proxy and essentially pass through this reqest to the 'client' upstream.(defined at Line 3). The browser makes a ws request.
    location /ws {
      proxy_pass http://client;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

    #If anyone request for /api then setup a proxy and essentially pass through this reqest to the 'api' upstream.(defined at Line 9).
    location /api {   
        # We rewrite the url since we want to chop off /api from the request.
        #Eg: If someone makes a request to /api/values/all to nginx, the output 
        # of nginx should be /values/all. So we need this rewrite config.
        # /api/(.*) is a regex with which incoming request is matched. Then $1 represents everything after the /api. break is a directive telling nginx not to match anything more with the rewritten url. So essentially when /api/values/all comes it matches the regex /api/(.*), so api gets chopped of and we get /values/all which is the $1 part, and due to the break it just ends then and there and we get /values/all.
        rewrite /api/(.*) /$1 break;  
        proxy_pass http://api;   
    }



}